{"version":3,"sources":["components/Alert.tsx","components/Garden.tsx","components/NoiseBar.tsx","components/SettingsDialog.tsx","components/Timer.tsx","config/constants.ts","services/storage.ts","App.tsx","hooks/useAudioLevel.ts","index.tsx"],"names":["Alert","_ref","alert","show","_jsx","className","children","message","Garden","plants","getEmoji","type","map","plant","id","NoiseBar","decibel","maxDecibel","alertThreshold","peaks","setPeaks","useState","nextPeakId","useRef","percentage","Math","min","isWarning","useEffect","newPeak","current","value","prev","timer","setTimeout","filter","p","clearTimeout","_jsxs","peak","style","width","toFixed","SettingsDialog","isOpen","onClose","settings","onSave","formData","setFormData","maxSeconds","onChange","e","Number","target","seedlingsToTree","treesToFlower","onClick","Timer","seconds","CONFIG","MAX_SECONDS","UPDATE_INTERVAL","STORAGE_KEY","defaultSettings","storageService","getData","data","localStorage","getItem","JSON","parse","setItem","stringify","resetData","plantIdCounter","generateId","Date","now","App","useAudioLevel","setDecibel","audioContext","analyser","microphone","async","stream","navigator","mediaDevices","getUserMedia","audio","AudioContext","createAnalyser","createMediaStreamSource","connect","fftSize","dataArray","Uint8Array","frequencyBinCount","updateDecibel","getByteFrequencyData","mappedDecibel","reduce","a","b","length","round","requestAnimationFrame","error","console","getMicrophone","close","setSeconds","setPlants","setAlert","isSettingsOpen","setIsSettingsOpen","setSettings","settingRef","timerRef","isLoaded","setIsLoaded","setInterval","prevPlants","seedlings","handleReset","window","confirm","newSettings","container","document","getElementById","Error","createRoot","render","React","StrictMode"],"mappings":"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","file":"static/js/main.437d44cc.chunk.js","sourcesContent":["import React from 'react';\nimport { AlertType } from '../types';\n\ntype AlertProps = {\n  alert: AlertType;\n};\n\nexport const Alert: React.FC<AlertProps> = ({ alert }) => {\n  if (!alert.show) return null;\n\n  return (\n    <div className=\"alert\">\n      <p>{alert.message}</p>\n    </div>\n  );\n};","import React from 'react';\nimport { Plant } from '../types';\n\ntype GardenProps = {\n  plants: Plant[];\n};\n\nexport const Garden: React.FC<GardenProps> = ({ plants }) => {\n  // 添加调试信息\n//   console.log('Current plants:', {\n//     total: plants.length,\n//     seedlings: plants.filter(p => p.type === 'seedling').length,\n//     trees: plants.filter(p => p.type === 'tree').length,\n//     flowers: plants.filter(p => p.type === 'flower').length\n//   });\n\n  const getEmoji = (type: Plant['type']) => {\n    switch (type) {\n      case 'seedling':\n        return '🌱';\n      case 'tree':\n        return '🌲';\n      case 'flower':\n        return '🌸';\n    }\n  };\n\n  return (\n    <div className=\"garden\">\n      {plants.map((plant) => (\n        <span key={plant.id} className=\"plant\">\n          {getEmoji(plant.type)}\n        </span>\n      ))}\n    </div>\n  );\n};","import React, { useEffect, useRef, useState } from 'react';\n\ninterface NoiseBarProps {\n  decibel: number;\n  maxDecibel: number;\n  alertThreshold: number;\n}\n\nexport const NoiseBar: React.FC<NoiseBarProps> = ({ \n  decibel, \n  maxDecibel, \n  alertThreshold \n}) => {\n  const [peaks, setPeaks] = useState<Array<{ id: number; value: number }>>([]);\n  const nextPeakId = useRef(0);\n  \n  const percentage = Math.min((decibel / maxDecibel) * 100, 100);\n  const isWarning = decibel >= alertThreshold;\n\n  useEffect(() => {\n    // 添加新的峰值\n    const newPeak = {\n      id: nextPeakId.current,\n      value: decibel\n    };\n    nextPeakId.current += 1;\n    setPeaks(prev => [...prev, newPeak]);\n\n    // 2秒后移除峰值\n    const timer = setTimeout(() => {\n      setPeaks(prev => prev.filter(p => p.id !== newPeak.id));\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, [decibel]);\n\n  return (\n    <div className={`noise-bar ${isWarning ? 'warning' : ''}`}>\n      {/* 显示所有峰值 */}\n      {peaks.map(peak => (\n        <div \n          key={peak.id}\n          className={`noise-fill peak ${isWarning ? 'warning' : ''}`}\n          style={{ \n            width: `${Math.min((peak.value / maxDecibel) * 100, 100)}%`\n          }}\n        />\n      ))}\n      {/* 当前值显示条 */}\n      <div \n        className={`noise-fill current ${isWarning ? 'warning' : ''}`}\n        style={{ width: `${percentage}%` }}\n      />\n      <span className=\"value-display\">\n        {decibel.toFixed(1)} dB\n      </span>\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport { StorageData } from '../services/storage';\n\ninterface SettingsDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  settings: StorageData['settings'];\n  onSave: (settings: StorageData['settings']) => void;\n}\n\nexport const SettingsDialog: React.FC<SettingsDialogProps> = ({\n  isOpen,\n  onClose,\n  settings,\n  onSave,\n}) => {\n  const [formData, setFormData] = useState(settings);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"settings-dialog\">\n      <div className=\"settings-content\">\n        <h2>🛠️ 设置</h2>\n        <div className=\"form-group\">\n          <label>计时时间（秒）：</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={formData.maxSeconds}\n            onChange={(e) => setFormData(prev => ({ ...prev, maxSeconds: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>最大分贝：</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={formData.maxDecibel}\n            onChange={(e) => setFormData(prev => ({ ...prev, maxDecibel: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>警告阈值：</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={formData.alertThreshold}\n            onChange={(e) => setFormData(prev => ({ ...prev, alertThreshold: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>树苗升级数量：</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={formData.seedlingsToTree}\n            onChange={(e) => setFormData(prev => ({ ...prev, seedlingsToTree: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>树木升级数量：</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={formData.treesToFlower}\n            onChange={(e) => setFormData(prev => ({ ...prev, treesToFlower: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"dialog-buttons\">\n          <button onClick={() => onSave(formData)}>保存</button>\n          <button className=\"cancel\" onClick={onClose}>取消</button>\n        </div>\n      </div>\n    </div>\n  );\n};","import React from 'react';\n\ninterface TimerProps {\n  seconds: number;\n  maxSeconds: number;\n}\n\nexport const Timer: React.FC<TimerProps> = ({ seconds, maxSeconds }) => {\n  const percentage = Math.min((seconds / maxSeconds) * 100, 100);\n\n  return (\n    <div className=\"timer-bar\">\n      <div \n        className=\"timer-fill\"\n        style={{ width: `${percentage}%` }}\n      />\n      <span className=\"value-display\">\n        {seconds}s / {maxSeconds}s\n      </span>\n    </div>\n  );\n};","export const CONFIG = {\n  // 计时相关\n  TIMER: {\n    MAX_SECONDS: 5,      // 计时器最大秒数\n    UPDATE_INTERVAL: 1000  // 更新间隔（毫秒）\n  },\n  \n  // 音量相关\n  NOISE: {\n    MAX_DECIBEL: 20,      // 最大分贝值\n    ALERT_THRESHOLD: 15    // 警告阈值\n  },\n  \n  // 植物相关\n  PLANTS: {\n    SEEDLINGS_TO_TREE: 2,  // 多少个树苗变成一棵树\n    TREES_TO_FLOWER: 2     // 多少棵树变成一朵花\n  }\n};\n\n// 添加类型导出\nexport type ConfigType = typeof CONFIG;","import { Plant } from '../types';\n\nconst STORAGE_KEY = 'quiet_garden_data';\n\nexport interface StorageData {\n  plants: Plant[];\n  settings: {\n    maxSeconds: number;\n    maxDecibel: number;\n    alertThreshold: number;\n    seedlingsToTree: number;  // 新增：多少个树苗变成树\n    treesToFlower: number;    // 新增：多少棵树变成花\n  };\n}\n\nexport const defaultSettings: StorageData['settings'] = {\n  maxSeconds: 5,\n  maxDecibel: 20,\n  alertThreshold: 15,\n  seedlingsToTree: 5,     // 默认5个树苗变成一棵树\n  treesToFlower: 5        // 默认5棵树变成一朵花\n};\n\nexport const storageService = {\n  getData: (): StorageData => {\n    const data = localStorage.getItem(STORAGE_KEY);\n    if (!data) {\n      return { plants: [], settings: defaultSettings };\n    }\n    return JSON.parse(data);\n  },\n\n  saveData: (data: StorageData): void => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  },\n\n  resetData: (): void => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify({ plants: [], settings: defaultSettings }));\n  },\n};","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { Alert } from './components/Alert';\nimport { Garden } from './components/Garden';\nimport { NoiseBar } from './components/NoiseBar';\nimport { SettingsDialog } from './components/SettingsDialog';\nimport { Timer } from './components/Timer';\nimport { CONFIG } from './config/constants';\nimport { useAudioLevel } from './hooks/useAudioLevel';\nimport { StorageData, storageService } from './services/storage';\nimport { AlertType, Plant } from './types';\n\n// 添加一个计数器用于生成唯一ID\nlet plantIdCounter = 0;\nconst generateId = () => `plant_${Date.now()}_${++plantIdCounter}`;\n\nconst App: React.FC = () => {\n    const decibel = useAudioLevel();\n    const [seconds, setSeconds] = useState(0);\n    const [plants, setPlants] = useState<Plant[]>([]);\n    const [alert, setAlert] = useState<AlertType>({ show: false, message: '' });\n    const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n    const [settings, setSettings] = useState<StorageData['settings']>(() => {\n        return storageService.getData().settings;\n    });\n    const settingRef = useRef(settings);\n    const timerRef = useRef<NodeJS.Timeout>(null);\n    const isAddingPlant = useRef(false);  // 新增：用于防止重复添加植物\n    const [isLoaded, setIsLoaded] = useState(false);  // 添加加载标志\n\n    // 在组件挂载时加载植物数据\n    useEffect(() => {\n        const data = storageService.getData();\n        setPlants(data.plants);\n        setSettings(data.settings);\n        setIsLoaded(true);  // 标记数据已加载\n    }, []);\n\n    // 当植物更新时保存数据\n    useEffect(() => {\n        if (isLoaded) {  // 只在加载完成后保存数据\n            storageService.saveData({ plants, settings });\n        }\n    }, [plants, settings, isLoaded]);\n\n\n    useEffect(() => {\n        if (decibel >= settingRef.current.alertThreshold) {\n            setSeconds(0);\n            setAlert({\n                show: true,\n                message: '噪音太大了！请保持安静。'\n            });\n            setTimeout(() => setAlert({ show: false, message: '' }), 3000);\n        } else {\n            if (!timerRef.current) {\n                timerRef.current = setInterval(() => {\n                    setSeconds(prev => {\n                        if (prev < settingRef.current.maxSeconds) {\n                            return prev + 1;\n                        }\n                        return 0;\n                    });\n                }, CONFIG.TIMER.UPDATE_INTERVAL);\n            }\n        }\n\n        // 组件卸载时清理定时器\n        // return () => {\n        //   if (timerRef.current) {\n        //     clearInterval(timerRef.current);\n        //   }\n        // };\n    }, [decibel, settings.maxSeconds, settings.alertThreshold]); // 添加依赖项\n\n    const addPlant = () => {\n        setPlants(prevPlants => {\n            // 统计当前植物数量\n            const seedlings = prevPlants.filter(p => p.type === 'seedling');\n            const trees = prevPlants.filter(p => p.type === 'tree');\n\n            // 如果有足够的树，转换为一朵花\n            if (trees.length >= settingRef.current.treesToFlower - 1 && seedlings.length >= settingRef.current.seedlingsToTree - 1) {\n                // 移除所有树，添加一朵新花\n                const remainingPlants = prevPlants.filter(p => p.type !== 'tree' && p.type !== 'seedling');\n                return [...remainingPlants, { id: generateId(), type: 'flower' }];\n            }\n\n            // 如果有足够的树苗，转换为一棵树\n            if (seedlings.length >= settingRef.current.seedlingsToTree - 1) {\n                // 移除所有树苗，添加一棵新树\n                const remainingPlants = prevPlants.filter(p => p.type !== 'seedling');\n                return [...remainingPlants, { id: generateId(), type: 'tree' }];\n            }\n\n            // 默认添加一个新的树苗\n            return [...prevPlants, { id: generateId(), type: 'seedling' }];\n        });\n    };\n\n    if (seconds === settings.maxSeconds) {\n        addPlant();\n        setSeconds(0);\n    }\n\n    const handleSettingsSave = (newSettings: StorageData['settings']) => {\n        setSettings({...newSettings});\n        settingRef.current = newSettings\n        setIsSettingsOpen(false);\n    };\n\n    const handleReset = () => {\n        if (window.confirm('确定要重置花园吗？')) {\n            storageService.resetData();\n            const data = storageService.getData();\n            setPlants(data.plants);\n            // setSettings(data.settings);\n            // settingRef.current = data.settings\n            setSeconds(0);\n        }\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"header\">\n                <button onClick={() => setIsSettingsOpen(true)}>⚙️</button>\n                <button onClick={handleReset}>🔄</button>\n            </div>\n            <div className=\"monitor-section\">\n                <div className=\"monitor-title\">\n                    🌱 保持安静，让花园成长\n                </div>\n                <div className=\"timer-section\">\n                    <h3>🕒 安静时间</h3>\n                    <Timer seconds={seconds} maxSeconds={settingRef.current.maxSeconds} />\n                </div>\n                <div className=\"noise-section\">\n                    <h3>🔊 当前音量</h3>\n                    <NoiseBar \n                        decibel={decibel} \n                        maxDecibel={settingRef.current.maxDecibel} \n                        alertThreshold={settingRef.current.alertThreshold} \n                    />\n                </div>\n            </div>\n            <Garden plants={plants} />\n            <Alert alert={alert} />\n            <SettingsDialog\n                isOpen={isSettingsOpen}\n                onClose={() => setIsSettingsOpen(false)}\n                settings={settingRef.current}\n                onSave={handleSettingsSave}\n            />\n        </div>\n    );\n};\n\nexport default App;","import { useEffect, useState } from 'react';\n\nexport const useAudioLevel = () => {\n  const [decibel, setDecibel] = useState(0);\n\n  useEffect(() => {\n    let audioContext: AudioContext;\n    let analyser: AnalyserNode;\n    let microphone: MediaStreamAudioSourceNode;\n\n    const getMicrophone = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        audioContext = new AudioContext();\n        analyser = audioContext.createAnalyser();\n        microphone = audioContext.createMediaStreamSource(stream);\n        microphone.connect(analyser);\n        analyser.fftSize = 256;\n\n        const dataArray = new Uint8Array(analyser.frequencyBinCount);\n        \n        const updateDecibel = () => {\n          analyser.getByteFrequencyData(dataArray);\n          const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n          // 将 0-255 的值映射到 0-50 的分贝范围\n          const mappedDecibel = (average / 255) * 50;\n          setDecibel(Math.round(mappedDecibel));\n          requestAnimationFrame(updateDecibel);\n        };\n\n        updateDecibel();\n      } catch (error) {\n        console.error('Error accessing microphone:', error);\n      }\n    };\n\n    getMicrophone();\n\n    return () => {\n      if (audioContext) {\n        audioContext.close();\n      }\n    };\n  }, []);\n\n  return decibel;\n};","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst container = document.getElementById('root');\nif (!container) throw new Error('Failed to find the root element');\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}