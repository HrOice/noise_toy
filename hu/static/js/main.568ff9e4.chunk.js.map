{"version":3,"sources":["components/Alert.tsx","components/Garden.tsx","config/constants.ts","components/NoiseBar.tsx","components/SettingsDialog.tsx","components/Timer.tsx","services/storage.ts","App.tsx","hooks/useAudioLevel.ts","index.tsx"],"names":["Alert","_ref","alert","show","_jsx","className","children","message","Garden","plants","getEmoji","type","map","plant","id","CONFIG","MAX_SECONDS","UPDATE_INTERVAL","MAX_DECIBEL","ALERT_THRESHOLD","NoiseBar","decibel","maxDecibel","alertThreshold","percentage","_jsxs","style","width","backgroundColor","toFixed","SettingsDialog","isOpen","onClose","settings","onSave","formData","setFormData","useState","value","maxSeconds","onChange","e","prev","Number","target","onClick","Timer","seconds","Math","min","formatTime","secs","toString","padStart","transition","STORAGE_KEY","defaultSettings","treesToFlower","seedlingsToTree","storageService","getData","data","localStorage","getItem","JSON","parse","setItem","stringify","resetData","plantIdCounter","generateId","Date","now","App","useAudioLevel","setDecibel","useEffect","audioContext","analyser","microphone","async","stream","navigator","mediaDevices","getUserMedia","audio","AudioContext","createAnalyser","createMediaStreamSource","connect","fftSize","dataArray","Uint8Array","frequencyBinCount","updateDecibel","getByteFrequencyData","mappedDecibel","reduce","a","b","length","round","requestAnimationFrame","error","console","getMicrophone","close","setSeconds","setPlants","setAlert","isSettingsOpen","setIsSettingsOpen","setSettings","timerRef","useRef","setTimeout","current","setInterval","prevPlants","seedlings","filter","p","handleReset","window","confirm","newSettings","container","document","getElementById","Error","createRoot","render","React","StrictMode"],"mappings":"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","file":"static/js/main.568ff9e4.chunk.js","sourcesContent":["import React from 'react';\nimport { AlertType } from '../types';\n\ntype AlertProps = {\n  alert: AlertType;\n};\n\nexport const Alert: React.FC<AlertProps> = ({ alert }) => {\n  if (!alert.show) return null;\n\n  return (\n    <div className=\"alert\">\n      <p>{alert.message}</p>\n    </div>\n  );\n};","import React from 'react';\nimport { Plant } from '../types';\n\ntype GardenProps = {\n  plants: Plant[];\n};\n\nexport const Garden: React.FC<GardenProps> = ({ plants }) => {\n  // Ê∑ªÂä†Ë∞ÉËØï‰ø°ÊÅØ\n//   console.log('Current plants:', {\n//     total: plants.length,\n//     seedlings: plants.filter(p => p.type === 'seedling').length,\n//     trees: plants.filter(p => p.type === 'tree').length,\n//     flowers: plants.filter(p => p.type === 'flower').length\n//   });\n\n  const getEmoji = (type: Plant['type']) => {\n    switch (type) {\n      case 'seedling':\n        return 'üå±';\n      case 'tree':\n        return 'üå≤';\n      case 'flower':\n        return 'üå∏';\n    }\n  };\n\n  return (\n    <div className=\"garden\">\n      {plants.map((plant) => (\n        <span key={plant.id} className=\"plant\">\n          {getEmoji(plant.type)}\n        </span>\n      ))}\n    </div>\n  );\n};","export const CONFIG = {\n  // ËÆ°Êó∂Áõ∏ÂÖ≥\n  TIMER: {\n    MAX_SECONDS: 5,      // ËÆ°Êó∂Âô®ÊúÄÂ§ßÁßíÊï∞\n    UPDATE_INTERVAL: 1000  // Êõ¥Êñ∞Èó¥ÈöîÔºàÊØ´ÁßíÔºâ\n  },\n  \n  // Èü≥ÈáèÁõ∏ÂÖ≥\n  NOISE: {\n    MAX_DECIBEL: 20,      // ÊúÄÂ§ßÂàÜË¥ùÂÄº\n    ALERT_THRESHOLD: 15    // Ë≠¶ÂëäÈòàÂÄº\n  },\n  \n  // Ê§çÁâ©Áõ∏ÂÖ≥\n  PLANTS: {\n    SEEDLINGS_TO_TREE: 2,  // Â§öÂ∞ë‰∏™Ê†ëËãóÂèòÊàê‰∏ÄÊ£µÊ†ë\n    TREES_TO_FLOWER: 2     // Â§öÂ∞ëÊ£µÊ†ëÂèòÊàê‰∏ÄÊúµËä±\n  }\n};\n\n// Ê∑ªÂä†Á±ªÂûãÂØºÂá∫\nexport type ConfigType = typeof CONFIG;","import React from 'react';\nimport { CONFIG } from '../config/constants';\n\ntype NoiseBarProps = {\n  decibel: number;\n  maxDecibel: number;\n  alertThreshold:number;\n};\n\nexport const NoiseBar: React.FC<NoiseBarProps> = ({ decibel, maxDecibel, alertThreshold }) => {\n  const percentage = (decibel / CONFIG.NOISE.MAX_DECIBEL) * 100;\n\n  return (\n    <div className=\"noise-bar\">\n      <div className=\"bar-container\">\n        <div \n          className=\"bar-fill\"\n          style={{ \n            width: `${percentage}%`,\n            backgroundColor: decibel >= alertThreshold ? '#ff4444' : '#44ff44'\n          }}\n        />\n      </div>\n      <div className=\"decibel-value\">\n        {decibel.toFixed(1)} / {maxDecibel} dB\n      </div>\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport { StorageData } from '../services/storage';\n\ninterface SettingsDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  settings: StorageData['settings'];\n  onSave: (settings: StorageData['settings']) => void;\n}\n\nexport const SettingsDialog: React.FC<SettingsDialogProps> = ({\n  isOpen,\n  onClose,\n  settings,\n  onSave,\n}) => {\n  const [formData, setFormData] = useState(settings);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"settings-dialog\">\n      <div className=\"settings-content\">\n        <h2>ËÆæÁΩÆ</h2>\n        <div className=\"form-group\">\n          <label>ËÆ°Êó∂Êó∂Èó¥ÔºàÁßíÔºâÔºö</label>\n          <input\n            type=\"number\"\n            value={formData.maxSeconds}\n            onChange={(e) => setFormData(prev => ({ ...prev, maxSeconds: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>ÊúÄÂ§ßÂàÜË¥ùÔºö</label>\n          <input\n            type=\"number\"\n            value={formData.maxDecibel}\n            onChange={(e) => setFormData(prev => ({ ...prev, maxDecibel: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Ë≠¶ÂëäÈòàÂÄºÔºö</label>\n          <input\n            type=\"number\"\n            value={formData.alertThreshold}\n            onChange={(e) => setFormData(prev => ({ ...prev, alertThreshold: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"dialog-buttons\">\n          <button onClick={() => onSave(formData)}>‰øùÂ≠ò</button>\n          <button onClick={onClose}>ÂèñÊ∂à</button>\n        </div>\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport { CONFIG } from '../config/constants';\n\ntype TimerProps = {\n  seconds: number;\n  maxSeconds: number;\n};\n\nexport const Timer: React.FC<TimerProps> = ({ seconds, maxSeconds }) => {\n  // Á°Æ‰øùÁôæÂàÜÊØî‰∏ç‰ºöË∂ÖËøá100%\n  const percentage = Math.min((seconds / CONFIG.TIMER.MAX_SECONDS) * 100, 100);\n  \n  // Ê†ºÂºèÂåñÊó∂Èó¥ÊòæÁ§∫\n  const formatTime = (secs: number): string => {\n    return `${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"timer\">\n      <div className=\"timer-bar\">\n        <div \n          className=\"timer-fill\"\n          style={{ \n            width: `${percentage}%`,\n            transition: 'width 0.3s ease-in-out'\n          }}\n        />\n      </div>\n      <div className=\"timer-value\">\n        {formatTime(seconds)}s / {formatTime(maxSeconds)}s\n      </div>\n    </div>\n  );\n};","import { Plant } from '../types';\n\nconst STORAGE_KEY = 'quiet_garden_data';\n\nexport interface StorageData {\n  plants: Plant[];\n  settings: {\n    maxSeconds: number;\n    maxDecibel: number;\n    alertThreshold: number;\n    treesToFlower: number;\n    seedlingsToTree: number;\n  };\n}\n\nexport const defaultSettings: StorageData['settings'] = {\n  maxSeconds: 5,\n  maxDecibel: 20,\n  alertThreshold: 15,\n  treesToFlower: 2,\nseedlingsToTree: 2,\n};\n\nexport const storageService = {\n  getData: (): StorageData => {\n    const data = localStorage.getItem(STORAGE_KEY);\n    if (!data) {\n      return { plants: [], settings: defaultSettings };\n    }\n    return JSON.parse(data);\n  },\n\n  saveData: (data: StorageData): void => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  },\n\n  resetData: (): void => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify({ plants: [], settings: defaultSettings }));\n  },\n};","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { Alert } from './components/Alert';\nimport { Garden } from './components/Garden';\nimport { NoiseBar } from './components/NoiseBar';\nimport { SettingsDialog } from './components/SettingsDialog';\nimport { Timer } from './components/Timer';\nimport { CONFIG } from './config/constants';\nimport { useAudioLevel } from './hooks/useAudioLevel';\nimport { StorageData, storageService } from './services/storage';\nimport { AlertType, Plant } from './types';\n\n// Ê∑ªÂä†‰∏Ä‰∏™ËÆ°Êï∞Âô®Áî®‰∫éÁîüÊàêÂîØ‰∏ÄID\nlet plantIdCounter = 0;\nconst generateId = () => `plant_${Date.now()}_${++plantIdCounter}`;\n\nconst App: React.FC = () => {\n    const decibel = useAudioLevel();\n    const [seconds, setSeconds] = useState(0);\n    const [plants, setPlants] = useState<Plant[]>([]);\n    const [alert, setAlert] = useState<AlertType>({ show: false, message: '' });\n    const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n    const [settings, setSettings] = useState<StorageData['settings']>(() => {\n        return storageService.getData().settings;\n    });\n    const timerRef = useRef<NodeJS.Timeout>(null);\n    const isAddingPlant = useRef(false);  // Êñ∞Â¢ûÔºöÁî®‰∫éÈò≤Ê≠¢ÈáçÂ§çÊ∑ªÂä†Ê§çÁâ©\n\n    // Âú®ÁªÑ‰ª∂ÊåÇËΩΩÊó∂Âä†ËΩΩÊ§çÁâ©Êï∞ÊçÆ\n    useEffect(() => {\n        const data = storageService.getData();\n        setPlants(data.plants);\n        setSettings(data.settings);\n    }, []);\n\n    // ÂΩìÊ§çÁâ©Êõ¥Êñ∞Êó∂‰øùÂ≠òÊï∞ÊçÆ\n    useEffect(() => {\n        storageService.saveData({ plants, settings });\n    }, [plants, settings]);\n\n    useEffect(() => {\n        if (decibel >= settings.alertThreshold) {\n            setSeconds(0);\n            setAlert({\n                show: true,\n                message: 'Âô™Èü≥Â§™Â§ß‰∫ÜÔºÅËØ∑‰øùÊåÅÂÆâÈùô„ÄÇ'\n            });\n            setTimeout(() => setAlert({ show: false, message: '' }), 3000);\n        } else {\n            if (!timerRef.current) {\n                timerRef.current = setInterval(() => {\n                    setSeconds(prev => {\n                        if (prev < settings.maxSeconds) {\n                            return prev + 1;\n                        }\n                        return 0;\n                    });\n                }, CONFIG.TIMER.UPDATE_INTERVAL);\n            }\n        }\n\n        // ÁªÑ‰ª∂Âç∏ËΩΩÊó∂Ê∏ÖÁêÜÂÆöÊó∂Âô®\n        // return () => {\n        //   if (timerRef.current) {\n        //     clearInterval(timerRef.current);\n        //   }\n        // };\n    }, [decibel, settings.maxSeconds, settings.alertThreshold]); // Ê∑ªÂä†‰æùËµñÈ°π\n\n    const addPlant = () => {\n\n        setPlants(prevPlants => {\n            // ÁªüËÆ°ÂΩìÂâçÊ§çÁâ©Êï∞Èáè\n            const seedlings = prevPlants.filter(p => p.type === 'seedling');\n            const trees = prevPlants.filter(p => p.type === 'tree');\n            // Â¶ÇÊûúÊúâË∂≥Â§üÁöÑÊ†ëÔºåËΩ¨Êç¢‰∏∫‰∏ÄÊúµËä±\n            if (trees.length >= settings.treesToFlower - 1 && seedlings.length >= settings.seedlingsToTree - 1) {\n                // ÁßªÈô§ÊâÄÊúâÊ†ëÔºåÊ∑ªÂä†‰∏ÄÊúµÊñ∞Ëä±\n                const remainingPlants = prevPlants.filter(p => p.type !== 'tree' && p.type !== 'seedling');\n                return [...remainingPlants, { id: generateId(), type: 'flower' }];\n            }\n            // Â¶ÇÊûúÊúâË∂≥Â§üÁöÑÊ†ëËãóÔºåËΩ¨Êç¢‰∏∫‰∏ÄÊ£µÊ†ë\n            if (seedlings.length >= settings.seedlingsToTree - 1) {\n                // ÁßªÈô§ÊâÄÊúâÊ†ëËãóÔºåÊ∑ªÂä†‰∏ÄÊ£µÊñ∞Ê†ë\n                const remainingPlants = prevPlants.filter(p => p.type !== 'seedling');\n                return [...remainingPlants, { id: generateId(), type: 'tree' }];\n            }\n\n            // ÈªòËÆ§Ê∑ªÂä†‰∏Ä‰∏™Êñ∞ÁöÑÊ†ëËãó\n            return [...prevPlants, { id: generateId(), type: 'seedling' }];\n        });\n    };\n\n    if (seconds === settings.maxSeconds) {\n        addPlant();\n        setSeconds(0);\n    }\n\n    const handleSettingsSave = (newSettings: StorageData['settings']) => {\n        setSettings(newSettings);\n        setIsSettingsOpen(false);\n    };\n\n    const handleReset = () => {\n        if (window.confirm('Á°ÆÂÆöË¶ÅÈáçÁΩÆËä±Âõ≠ÂêóÔºü')) {\n            storageService.resetData();\n            const data = storageService.getData();\n            setPlants(data.plants);\n            setSettings(data.settings);\n            setSeconds(0);\n        }\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"header\">\n                <button onClick={() => setIsSettingsOpen(true)}>‚öôÔ∏è ËÆæÁΩÆ</button>\n                <button onClick={handleReset}>üîÑ ÈáçÁΩÆËä±Âõ≠</button>\n            </div>\n            <div className=\"monitor-section\">\n                <div className=\"monitor-title\">\n                    üå± ‰øùÊåÅÂÆâÈùôÔºåËÆ©Ëä±Âõ≠ÊÖ¢ÊÖ¢ÈïøÂ§ßÂêßÔºÅ\n                </div>\n                <div className=\"timer-section\">\n                    <h3>üïí ÂÆâÈùôÊó∂Èó¥</h3>\n                    <Timer seconds={seconds} maxSeconds={settings.maxSeconds} />\n                </div>\n                <div className=\"noise-section\">\n                    <h3>üîä ÂΩìÂâçÈü≥Èáè</h3>\n                    <NoiseBar \n                        decibel={decibel} \n                        maxDecibel={settings.maxDecibel} \n                        alertThreshold={settings.alertThreshold} \n                    />\n                </div>\n            </div>\n            <h3 className=\"garden-title\">üå∫ ÊàëÁöÑÂ∞èËä±Âõ≠</h3>\n            <Garden plants={plants} />\n            <Alert alert={alert} />\n            <SettingsDialog\n                isOpen={isSettingsOpen}\n                onClose={() => setIsSettingsOpen(false)}\n                settings={settings}\n                onSave={handleSettingsSave}\n            />\n        </div>\n    );\n};\n\nexport default App;","import { useEffect, useState } from 'react';\n\nexport const useAudioLevel = () => {\n  const [decibel, setDecibel] = useState(0);\n\n  useEffect(() => {\n    let audioContext: AudioContext;\n    let analyser: AnalyserNode;\n    let microphone: MediaStreamAudioSourceNode;\n\n    const getMicrophone = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        audioContext = new AudioContext();\n        analyser = audioContext.createAnalyser();\n        microphone = audioContext.createMediaStreamSource(stream);\n        microphone.connect(analyser);\n        analyser.fftSize = 256;\n\n        const dataArray = new Uint8Array(analyser.frequencyBinCount);\n        \n        const updateDecibel = () => {\n          analyser.getByteFrequencyData(dataArray);\n          const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n          // Â∞Ü 0-255 ÁöÑÂÄºÊò†Â∞ÑÂà∞ 0-50 ÁöÑÂàÜË¥ùËåÉÂõ¥\n          const mappedDecibel = (average / 255) * 50;\n          setDecibel(Math.round(mappedDecibel));\n          requestAnimationFrame(updateDecibel);\n        };\n\n        updateDecibel();\n      } catch (error) {\n        console.error('Error accessing microphone:', error);\n      }\n    };\n\n    getMicrophone();\n\n    return () => {\n      if (audioContext) {\n        audioContext.close();\n      }\n    };\n  }, []);\n\n  return decibel;\n};","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst container = document.getElementById('root');\nif (!container) throw new Error('Failed to find the root element');\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}