{"version":3,"sources":["components/Alert.tsx","components/Garden.tsx","components/NoiseBar.tsx","components/SettingsDialog.tsx","components/Timer.tsx","config/constants.ts","hooks/useAudioLevel.ts","services/storage.ts","App.tsx","index.tsx"],"names":["Alert","_ref","alert","show","_jsx","className","children","_jsxs","Garden","plants","getEmoji","type","map","plant","id","NoiseBar","decibel","maxDecibel","alertThreshold","peaks","setPeaks","useState","nextPeakId","useRef","percentage","Math","min","isWarning","useEffect","newPeak","current","value","prev","setTimeout","filter","p","peak","toString","style","width","toFixed","SettingsDialog","isOpen","onClose","settings","onSave","formData","setFormData","maxSeconds","onChange","e","Number","target","seedlingsToTree","treesToFlower","onClick","Timer","seconds","CONFIG","MAX_SECONDS","UPDATE_INTERVAL","useAudioLevel","isPaused","arguments","length","undefined","setDecibel","streamRef","analyserRef","animationFrameRef","console","log","async","stream","navigator","mediaDevices","getUserMedia","audio","audioContext","AudioContext","analyser","createAnalyser","createMediaStreamSource","connect","fftSize","dataArray","Uint8Array","frequencyBinCount","updateDecibel","getByteFrequencyData","mappedDecibel","reduce","a","b","round","requestAnimationFrame","error","getMicrophone","cancelAnimationFrame","getTracks","forEach","track","stop","disconnect","STORAGE_KEY","defaultSettings","storageService","getData","data","localStorage","getItem","JSON","parse","setItem","stringify","resetData","plantIdCounter","generateId","Date","now","App","setIsPaused","setSeconds","setPlants","setAlert","message","isSettingsOpen","setIsSettingsOpen","setSettings","settingRef","timerRef","isLoaded","setIsLoaded","setInterval","prevPlants","seedlings","handlePlayPause","clearInterval","handleReset","window","confirm","newSettings","container","document","getElementById","Error","createRoot","render","React","StrictMode"],"mappings":"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","file":"static/js/main.a44f1961.chunk.js","sourcesContent":["import React from 'react';\nimport { AlertType } from '../types';\nimport './Alert.css';\n\ninterface AlertProps {\n  alert: AlertType;\n}\n\nexport const Alert: React.FC<AlertProps> = ({ alert }) => {\n  if (!alert.show) return null;\n  \n  return (\n    <div className=\"alert\">\n      <div className=\"alert-content\">\n        <div className=\"alert-icon\">!</div>\n        <div className=\"alert-message\">\n          <div className=\"alert-text\">Â£∞Èü≥Â§™Â§ß‰∫Ü</div>\n          <div className=\"alert-text\">ËØ∑‰øùÊåÅÂÆâÈùô</div>\n        </div>\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport { Plant } from '../types';\n\ntype GardenProps = {\n  plants: Plant[];\n};\n\nexport const Garden: React.FC<GardenProps> = ({ plants }) => {\n  // Ê∑ªÂä†Ë∞ÉËØï‰ø°ÊÅØ\n//   console.log('Current plants:', {\n//     total: plants.length,\n//     seedlings: plants.filter(p => p.type === 'seedling').length,\n//     trees: plants.filter(p => p.type === 'tree').length,\n//     flowers: plants.filter(p => p.type === 'flower').length\n//   });\n\n  const getEmoji = (type: Plant['type']) => {\n    switch (type) {\n      case 'seedling':\n        return 'üå±';\n      case 'tree':\n        return 'üå≤';\n      case 'flower':\n        return 'üå∏';\n    }\n  };\n\n  return (\n    <div className=\"garden\">\n      {plants.map((plant) => (\n        <span key={plant.id} className=\"plant\">\n          {getEmoji(plant.type)}\n        </span>\n      ))}\n    </div>\n  );\n};","import React, { useEffect, useRef, useState } from 'react';\n\ninterface NoiseBarProps {\n  decibel: number;\n  maxDecibel: number;\n  alertThreshold: number;\n}\n\nexport const NoiseBar: React.FC<NoiseBarProps> = ({ \n  decibel, \n  maxDecibel, \n  alertThreshold \n}) => {\n  const [peaks, setPeaks] = useState<Array<{ id: number; value: number }>>([]);\n  const nextPeakId = useRef(0);\n  \n  const percentage = Math.min((decibel / maxDecibel) * 100, 100);\n  const isWarning = decibel >= alertThreshold;\n\n  useEffect(() => {\n    // Ê∑ªÂä†Êñ∞ÁöÑÂ≥∞ÂÄº\n    const newPeak = {\n      id: nextPeakId.current,\n      value: decibel\n    };\n    nextPeakId.current += 1;\n    setPeaks(prev => [...prev, newPeak]);\n\n    // 2ÁßíÂêéÁßªÈô§Â≥∞ÂÄº\n    const timer = setTimeout(() => {\n      setPeaks(prev => prev.filter(p => p.id !== newPeak.id));\n    }, 2000);\n\n    // return () => clearTimeout(timer);\n  }, [decibel]);\n\n  return (\n    <div className={`noise-bar ${isWarning ? 'warning' : ''}`}>\n      {/* ÊòæÁ§∫ÊâÄÊúâÂ≥∞ÂÄº */}\n      {peaks.map(peak => (\n        <div \n          key={peak.id}\n          id={peak.id.toString()}\n          className={`noise-fill peak ${isWarning ? 'warning' : ''}`}\n          style={{ \n            width: `${Math.min((peak.value / maxDecibel) * 100, 100)}%`\n          }}\n        />\n      ))}\n      {/* ÂΩìÂâçÂÄºÊòæÁ§∫Êù° */}\n      <div \n        className={`noise-fill current ${isWarning ? 'warning' : ''}`}\n        style={{ width: `${percentage}%` }}\n      />\n      <span className=\"value-display\">\n        {decibel.toFixed(1)} dB\n      </span>\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport { StorageData } from '../services/storage';\n\ninterface SettingsDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  settings: StorageData['settings'];\n  onSave: (settings: StorageData['settings']) => void;\n}\n\nexport const SettingsDialog: React.FC<SettingsDialogProps> = ({\n  isOpen,\n  onClose,\n  settings,\n  onSave,\n}) => {\n  const [formData, setFormData] = useState(settings);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"settings-dialog\">\n      <div className=\"settings-content\">\n        <h2>üõ†Ô∏è ËÆæÁΩÆ</h2>\n        <div className=\"form-group\">\n          <label>ËÆ°Êó∂Êó∂Èó¥ÔºàÁßíÔºâÔºö</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={formData.maxSeconds}\n            onChange={(e) => setFormData(prev => ({ ...prev, maxSeconds: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>ÊúÄÂ§ßÂàÜË¥ùÔºö</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={formData.maxDecibel}\n            onChange={(e) => setFormData(prev => ({ ...prev, maxDecibel: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Ë≠¶ÂëäÈòàÂÄºÔºö</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={formData.alertThreshold}\n            onChange={(e) => setFormData(prev => ({ ...prev, alertThreshold: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Ê†ëËãóÂçáÁ∫ßÊï∞ÈáèÔºö</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={formData.seedlingsToTree}\n            onChange={(e) => setFormData(prev => ({ ...prev, seedlingsToTree: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label>Ê†ëÊú®ÂçáÁ∫ßÊï∞ÈáèÔºö</label>\n          <input\n            type=\"number\"\n            min=\"1\"\n            value={formData.treesToFlower}\n            onChange={(e) => setFormData(prev => ({ ...prev, treesToFlower: Number(e.target.value) }))}\n          />\n        </div>\n        <div className=\"dialog-buttons\">\n          <button onClick={() => onSave(formData)}>‰øùÂ≠ò</button>\n          <button className=\"cancel\" onClick={onClose}>ÂèñÊ∂à</button>\n        </div>\n      </div>\n    </div>\n  );\n};","import React from 'react';\n\ninterface TimerProps {\n  seconds: number;\n  maxSeconds: number;\n}\n\nexport const Timer: React.FC<TimerProps> = ({ seconds, maxSeconds }) => {\n  const percentage = Math.min((seconds / maxSeconds) * 100, 100);\n\n  return (\n    <div className=\"timer-bar\">\n      <div \n        className=\"timer-fill\"\n        style={{ width: `${percentage}%` }}\n      />\n      <span className=\"value-display\">\n        {seconds}s / {maxSeconds}s\n      </span>\n    </div>\n  );\n};","export const CONFIG = {\n  // ËÆ°Êó∂Áõ∏ÂÖ≥\n  TIMER: {\n    MAX_SECONDS: 5,      // ËÆ°Êó∂Âô®ÊúÄÂ§ßÁßíÊï∞\n    UPDATE_INTERVAL: 1000  // Êõ¥Êñ∞Èó¥ÈöîÔºàÊØ´ÁßíÔºâ\n  },\n  \n  // Èü≥ÈáèÁõ∏ÂÖ≥\n  NOISE: {\n    MAX_DECIBEL: 20,      // ÊúÄÂ§ßÂàÜË¥ùÂÄº\n    ALERT_THRESHOLD: 15    // Ë≠¶ÂëäÈòàÂÄº\n  },\n  \n  // Ê§çÁâ©Áõ∏ÂÖ≥\n  PLANTS: {\n    SEEDLINGS_TO_TREE: 2,  // Â§öÂ∞ë‰∏™Ê†ëËãóÂèòÊàê‰∏ÄÊ£µÊ†ë\n    TREES_TO_FLOWER: 2     // Â§öÂ∞ëÊ£µÊ†ëÂèòÊàê‰∏ÄÊúµËä±\n  }\n};\n\n// Ê∑ªÂä†Á±ªÂûãÂØºÂá∫\nexport type ConfigType = typeof CONFIG;","import { useEffect, useRef, useState } from 'react';\n\nexport const useAudioLevel = (isPaused = false) => {\n  const [decibel, setDecibel] = useState(0);\n  const streamRef = useRef<MediaStream | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const animationFrameRef = useRef<number>(0);\n\n  useEffect(() => {\n    console.log('useAudio')\n    const getMicrophone = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        streamRef.current = stream;\n\n        const audioContext = new AudioContext();\n        const analyser = audioContext.createAnalyser();\n        analyserRef.current = analyser;\n        const microphone = audioContext.createMediaStreamSource(stream);\n        microphone.connect(analyser);\n        analyser.fftSize = 256;\n\n        const dataArray = new Uint8Array(analyser.frequencyBinCount);\n        \n        const updateDecibel = () => {\n          analyser.getByteFrequencyData(dataArray);\n          const average = dataArray.reduce((a, b) => a + b) / dataArray.length;\n          // Â∞Ü 0-255 ÁöÑÂÄºÊò†Â∞ÑÂà∞ 0-50 ÁöÑÂàÜË¥ùËåÉÂõ¥\n          const mappedDecibel = (average / 255) * 50;\n          setDecibel(Math.round(mappedDecibel));\n          animationFrameRef.current = requestAnimationFrame(updateDecibel);\n        };\n\n        updateDecibel();\n      } catch (error) {\n        console.error('Error accessing microphone:', error);\n      }\n    };\n\n    if (!isPaused) {\n        debugger\n        getMicrophone();\n    }\n\n    return () => {\n        console.log('stop media')\n        if (animationFrameRef.current) {\n            cancelAnimationFrame(animationFrameRef.current);\n        }\n        if (streamRef.current) {\n            streamRef.current.getTracks().forEach(track => track.stop());\n            streamRef.current = null;\n        }\n        if (analyserRef.current) {\n            analyserRef.current.disconnect();\n            analyserRef.current = null;\n        }\n        setDecibel(0);\n    };\n  }, [isPaused]);\n\n  return decibel;\n};","import { Plant } from '../types';\n\nconst STORAGE_KEY = 'quiet_garden_data';\n\nexport interface StorageData {\n  plants: Plant[];\n  settings: {\n    maxSeconds: number;\n    maxDecibel: number;\n    alertThreshold: number;\n    seedlingsToTree: number;  // Êñ∞Â¢ûÔºöÂ§öÂ∞ë‰∏™Ê†ëËãóÂèòÊàêÊ†ë\n    treesToFlower: number;    // Êñ∞Â¢ûÔºöÂ§öÂ∞ëÊ£µÊ†ëÂèòÊàêËä±\n  };\n}\n\nexport const defaultSettings: StorageData['settings'] = {\n  maxSeconds: 5,\n  maxDecibel: 20,\n  alertThreshold: 15,\n  seedlingsToTree: 5,     // ÈªòËÆ§5‰∏™Ê†ëËãóÂèòÊàê‰∏ÄÊ£µÊ†ë\n  treesToFlower: 5        // ÈªòËÆ§5Ê£µÊ†ëÂèòÊàê‰∏ÄÊúµËä±\n};\n\nexport const storageService = {\n  getData: (): StorageData => {\n    const data = localStorage.getItem(STORAGE_KEY);\n    if (!data) {\n      return { plants: [], settings: defaultSettings };\n    }\n    return JSON.parse(data);\n  },\n\n  saveData: (data: StorageData): void => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n  },\n\n  resetData: (): void => {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify({ plants: [], settings: defaultSettings }));\n  },\n};","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { Alert } from './components/Alert';\nimport { Garden } from './components/Garden';\nimport { NoiseBar } from './components/NoiseBar';\nimport { SettingsDialog } from './components/SettingsDialog';\nimport { Timer } from './components/Timer';\nimport { CONFIG } from './config/constants';\nimport { useAudioLevel } from './hooks/useAudioLevel';\nimport { StorageData, storageService } from './services/storage';\nimport { AlertType, Plant } from './types';\n\n// Ê∑ªÂä†‰∏Ä‰∏™ËÆ°Êï∞Âô®Áî®‰∫éÁîüÊàêÂîØ‰∏ÄID\nlet plantIdCounter = 0;\nconst generateId = () => `plant_${Date.now()}_${++plantIdCounter}`;\n\nconst App: React.FC = () => {\n    const [isPaused, setIsPaused] = useState(false);\n    const decibel = useAudioLevel(isPaused);\n    const [seconds, setSeconds] = useState(0);\n    const [plants, setPlants] = useState<Plant[]>([]);\n    const [alert, setAlert] = useState<AlertType>({ show: false, message: '' });\n    const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n    const [settings, setSettings] = useState<StorageData['settings']>(() => {\n        return storageService.getData().settings;\n    });\n    const settingRef = useRef(settings);\n    const timerRef = useRef<NodeJS.Timeout>(null);\n    const isAddingPlant = useRef(false);  // Êñ∞Â¢ûÔºöÁî®‰∫éÈò≤Ê≠¢ÈáçÂ§çÊ∑ªÂä†Ê§çÁâ©\n    const [isLoaded, setIsLoaded] = useState(false);  // Ê∑ªÂä†Âä†ËΩΩÊ†áÂøó\n\n    // Âú®ÁªÑ‰ª∂ÊåÇËΩΩÊó∂Âä†ËΩΩÊ§çÁâ©Êï∞ÊçÆ\n    useEffect(() => {\n        const data = storageService.getData();\n        setPlants(data.plants);\n        setSettings(data.settings);\n        setIsLoaded(true);  // Ê†áËÆ∞Êï∞ÊçÆÂ∑≤Âä†ËΩΩ\n    }, []);\n\n    // ÂΩìÊ§çÁâ©Êõ¥Êñ∞Êó∂‰øùÂ≠òÊï∞ÊçÆ\n    useEffect(() => {\n        if (isLoaded) {  // Âè™Âú®Âä†ËΩΩÂÆåÊàêÂêé‰øùÂ≠òÊï∞ÊçÆ\n            storageService.saveData({ plants, settings });\n        }\n    }, [plants, settings, isLoaded]);\n\n    useEffect(() => {\n        if (decibel >= settingRef.current.maxDecibel) {\n            setSeconds(0);\n        }\n        if (decibel >= settingRef.current.alertThreshold) {\n            setAlert({\n                show: true,\n                message: 'Âô™Èü≥Â§™Â§ß‰∫ÜÔºÅËØ∑‰øùÊåÅÂÆâÈùô„ÄÇ'\n            });\n            setTimeout(() => setAlert({ show: false, message: '' }), 3000);\n        } else {\n            if (!timerRef.current && !isPaused) {\n                console.log('start time')\n                timerRef.current = setInterval(() => {\n                    setSeconds(prev => {\n                        if (prev < settingRef.current.maxSeconds) {\n                            return prev + 1;\n                        }\n                        return 0;\n                    });\n                }, CONFIG.TIMER.UPDATE_INTERVAL);\n            }\n        }\n    }, [decibel, settings.maxSeconds, settings.alertThreshold]); // Ê∑ªÂä†‰æùËµñÈ°π\n\n    const addPlant = () => {\n        setPlants(prevPlants => {\n            // ÁªüËÆ°ÂΩìÂâçÊ§çÁâ©Êï∞Èáè\n            const seedlings = prevPlants.filter(p => p.type === 'seedling');\n            const trees = prevPlants.filter(p => p.type === 'tree');\n\n            // Â¶ÇÊûúÊúâË∂≥Â§üÁöÑÊ†ëÔºåËΩ¨Êç¢‰∏∫‰∏ÄÊúµËä±\n            if (trees.length >= settingRef.current.treesToFlower - 1 && seedlings.length >= settingRef.current.seedlingsToTree - 1) {\n                // ÁßªÈô§ÊâÄÊúâÊ†ëÔºåÊ∑ªÂä†‰∏ÄÊúµÊñ∞Ëä±\n                const remainingPlants = prevPlants.filter(p => p.type !== 'tree' && p.type !== 'seedling');\n                return [...remainingPlants, { id: generateId(), type: 'flower' }];\n            }\n\n            // Â¶ÇÊûúÊúâË∂≥Â§üÁöÑÊ†ëËãóÔºåËΩ¨Êç¢‰∏∫‰∏ÄÊ£µÊ†ë\n            if (seedlings.length >= settingRef.current.seedlingsToTree - 1) {\n                // ÁßªÈô§ÊâÄÊúâÊ†ëËãóÔºåÊ∑ªÂä†‰∏ÄÊ£µÊñ∞Ê†ë\n                const remainingPlants = prevPlants.filter(p => p.type !== 'seedling');\n                return [...remainingPlants, { id: generateId(), type: 'tree' }];\n            }\n\n            // ÈªòËÆ§Ê∑ªÂä†‰∏Ä‰∏™Êñ∞ÁöÑÊ†ëËãó\n            return [...prevPlants, { id: generateId(), type: 'seedling' }];\n        });\n    };\n\n    if (seconds === settings.maxSeconds) {\n        addPlant();\n        setSeconds(0);\n    }\n\n    const handleSettingsSave = (newSettings: StorageData['settings']) => {\n        setSettings({...newSettings});\n        settingRef.current = newSettings\n        setIsSettingsOpen(false);\n    };\n\n    const handleReset = () => {\n        if (window.confirm('Á°ÆÂÆöË¶ÅÈáçÁΩÆËä±Âõ≠ÂêóÔºü')) {\n            storageService.resetData();\n            const data = storageService.getData();\n            setPlants(data.plants);\n            setSeconds(0);\n        }\n    };\n\n    const handlePlayPause = () => {\n        if (!isPaused) {\n            // \n            if (timerRef.current) {\n                console.log('stop time')\n                clearInterval(timerRef.current);\n                timerRef.current = null;\n                // setSeconds(0);\n            }\n        }\n        console.log(isPaused ? \"play\": \"stop\")\n        setIsPaused(prev => {\n            if (!prev) { // ÊöÇÂÅú\n                \n            }\n            return !prev;\n        });\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"header\">\n                <button \n                    onClick={handlePlayPause} \n                    className=\"control-button\"\n                >\n                    {isPaused ? '‚ñ∂Ô∏è' : '‚è∏Ô∏è'}\n                </button>\n                <button onClick={() => setIsSettingsOpen(true)}>‚öôÔ∏è</button>\n                <button onClick={handleReset}>üîÑ</button>\n            </div>\n            <div className=\"monitor-section\">\n                <div className=\"monitor-title\">\n                    üå± ‰øùÊåÅÂÆâÈùôÔºåËÆ©Ëä±Âõ≠ÊàêÈïø\n                </div>\n                <div className=\"timer-section\">\n                    <h3>üïí ÂÆâÈùôÊó∂Èó¥</h3>\n                    <Timer seconds={seconds} maxSeconds={settingRef.current.maxSeconds} />\n                </div>\n                <div className=\"noise-section\">\n                    <h3>üîä ÂΩìÂâçÈü≥Èáè</h3>\n                    <NoiseBar \n                        decibel={decibel} \n                        maxDecibel={settingRef.current.maxDecibel} \n                        alertThreshold={settingRef.current.alertThreshold} \n                    />\n                </div>\n            </div>\n            <Garden plants={plants} />\n            <Alert alert={alert} />\n            <SettingsDialog\n                isOpen={isSettingsOpen}\n                onClose={() => setIsSettingsOpen(false)}\n                settings={settingRef.current}\n                onSave={handleSettingsSave}\n            />\n        </div>\n    );\n};\n\nexport default App;","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst container = document.getElementById('root');\nif (!container) throw new Error('Failed to find the root element');\nconst root = createRoot(container);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);"],"sourceRoot":""}